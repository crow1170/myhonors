{
  "rules": {
		// set defaults to no reads and no writes unless you're an Administrator
		".read": "auth.isAdmin === true",
		".write": "auth.isAdmin === true",
		
		"user_profiles": {
			".read": true,
			"$userId": {
				".read": "auth.id == $userId",
				// we need to temporarily allow Arch mods to edit users since we don't have a full list of faculty,
				// staff, and students in the system yet. Once we have that data in place, we can move the isArchMod
				// half of this .write rule down into the archProjects child
				".write": "auth.id == $userId || auth.isArchMod === true",
				//".validate": "newData.hasChildren(['fname', 'lname'])", // we can add this back after we settle the above situation with Arch

				// validate specific entries
				"fname": {
					".validate": "newData.isString()"
				},
				"lname": {
					".validate": "newData.isString()"
				},
				"pid": {
					// Panther ID is intentionally stored as a string instead of a number. Think of it like a
					// username, we're never going to perform any numerical additions or subtractions with it
					".validate": "newData.isString()"
				},
				"lastActivity": {
					// timestamp in milliseconds, used to check if the user has ever logged in before (if not, we create a profile for them)
					// and can also be used for one-time code executions or announcement broadcasts (if the user hasn't logged on since
					// [date/time when something important happened], execute some code or show the user an announcement about it)
					".validate": "newData.isNumber()"
				},
				"rsvps": {
					"$eventID": {
						".validate": "newData.isBoolean()"
					}
				},
				"comments": {
					"$commentID": {
						".validate": "newData.isBoolean()"
					}
				},
				"archProjects": {
					"$projectId": {
						".validate": "newData.isBoolean()"
					}
				},

				// prevents any extra children (we only want the fields that are explicitly identified here)
				"$other": {
					".validate": false
				}
			}
		},

		"swipes": {
			".read": true,
			".write": true,
		},

		"events": {
			// anyone can read event info, but only Event moderators can add new events and edit
			// any of the details
			".read": true,
			".write": "auth.isEventMod === true",
			"$eventId": {
				"name": {
					".validate": "newData.isString()"
				},
				"desc": {
					".validate": "newData.isString()"
				},
				"type": {
					".validate": "newData.isString()"
				},
				"date": {
					// events must have a start & end date, and start date must come before its end date
					".validate": "newData.hasChildren(['begins', 'ends']) && newData.child('begins').val() < newData.child('ends').val()",

					"begins": {
						// events can only be created in the future
						".validate": "newData.isNumber() && newData.val() > now"
					},
					"ends": {
						// events can only be created in the future
						".validate": "newData.isNumber() && newData.val() > now"
					}
				},
				"location": {
					".validate": "newData.hasChild('name')",

					"lng": {
						".validate": "newData.isNumber()"
					},
					"lat": {
						".validate": "newData.isNumber()"
					},
					"name": {
						".validate": "newData.isString()"
					}
				},
				"comments": {
					// anyone can comment on an event
					".write": true,
					"$commentId": {
						".validate": "newData.isBoolean()"
					}
				},
				"rsvps": {
					// anyone can RSVP to an event
					".write": true,
					"$rsvpId": {
						".validate": "newData.isBoolean()"
					}
				}
			}
		},
		
		"careers": {
			".read": true,
			".write": true
		},

		"comments": {
			"$commentID": {
				".read": true,
				".write": "auth.id == newData.child('author').val()", // ensure author of comment is current user
				".validate": "newData.hasChildren(['author', 'date', 'content'])",

				// validate specific properties
				"author": {
					".validate": "newData.isString()",
				},
				"date": {
					".validate": "newData.isNumber()"
				},
				"content": {
					".validate": "newData.isString()"
				},

				// prevents any extra children (we only want the fields that are explicitly identified here)
				"$other": {
					".validate": false
				}
			}
		},

		"arch": {
			".read": true,
			".write": true
		}
		
	}
}